---
description: Product Requirements Document
globs: 
alwaysApply: false
---
# Product Requirements Document (PRD)

## 1. 개요 (Introduction)

### 1.1 문서 목적

본 문서는 비트코인 자동 매매 프로그램의 기능 및 요구사항을 정의하기 위한 제품 요구사항 문서(Product Requirements Document, PRD)이다.

### 1.2 배경

비트코인 및 암호화폐 시장은 24시간 운영되며 높은 변동성을 갖는다. 수동 매매 방식은 피로도가 높고, 최적의 매매 타이밍을 놓칠 가능성이 크다. 이를 해결하기 위해 Python을 활용한 자동 매매 프로그램을 개발하여 시장 기회를 포착하고 지속적인 매매 전략을 실행하고자 한다.

### 1.3 목표

- **뇌동매매 방지**: 감정 개입 없이 규칙 기반 매매 실행
- **원칙 준수**: 설정된 전략과 조건에 따른 엄격한 매매 수행
- **업무 집중**: 자동화된 매매로 인해 다른 업무에 집중 가능
- **자동 매매**: 사전에 정의된 매매 전략을 자동으로 실행
- **실시간 모니터링**: 현재 시장 상황을 반영한 즉각적인 의사결정

---

## 2. 제품 개요 (Product Overview)

### 2.1 핵심 기능

- **주문 자동화**: 지정된 조건(가격, 이동 평균, 거래량 등)에 따른 매수/매도 자동 실행
- **실시간 시세 조회**: 거래소 API를 통해 시장 데이터를 수집 및 분석
- **로그 및 알림 시스템**: 매매 실행 내역을 기록하고 텔레그램 알림 제공
- **엑셀 리포트 생성**: 매매 결과를 엑셀 파일로 저장하여 분석 가능

---

## 3. 기능 요구사항 (Feature Requirements)

| 기능          | 설명                                          |
| ----------- | ------------------------------------------- |
| 시세 데이터 수집   | 실시간으로 Upbit API를 통해 가격, 거래량, 호가 등의 데이터를 가져옴 |
| 자동 매매 전략 실행 | 특정 조건(예: 이동 평균 교차, RSI 지표 등)에 따라 매수/매도 실행   |
| 주문 관리       | 시장가, 손절매 및 이익 실현 주문 지원                 |
| 리스크 관리      | 최대 손실 한도 설정  |
| 로그 및 알림     | 매매 내역을 로깅하고 텔레그램 알림 제공                      |
| 엑셀 리포트 생성   | 매매 내역을 엑셀 파일로 저장하여 분석                       |
| 모니터링 웹 제공   | streamlit 을 이용한 데시 보드 제공 

---

## 4. 기술 요구사항 (Technical Requirements)

### 4.1 시스템 아키텍처

- **Python 기반 백엔드**: Upbit API를 활용하여 데이터 수집 및 주문 실행
- **로그 시스템**: `logging` 모듈 
- **알림 시스템**: 텔레그램 연동
- **엘셀 리포팅**: 엑셀 파일 리포팅 
- **자동 배포**: Git action 기반으로 AWS EC2 VM에 배포
- **모니터링**:  AWS EC2 VM 에서 streamlit 이용하여 데시 보드 제공  

### 4.2 API 및 데이터 흐름

1. Upbit API에서 시세 데이터 실시간 수집
2. 매매 전략 모듈이 데이터를 분석하고 주문 결정
3. 주문 실행 및 체결 여부 확인
4. 결과를 엑셀 파일로 저장하고 텔레그램으로 알림 전송

---

## 5. 프로젝트 구조 (Project Structure)

```
├── .gitignore
├── README.md
├── config
│   ├── dev_config.yaml
│   ├── prod_config.yaml
│   └── sample_config.yaml
├── log
├── main.py
├── requirements.txt
├── upbit
│   ├── analyzer.py
│   ├── api.py
│   ├── trader.py
└── util
    ├── config.py
    ├── logger.py
    ├── telegram_bot.py
    ├── report_generator.py
```

- **`config/`**: 환경별 설정 파일 저장 (개발, 운영, 샘플)
- **`upbit/`**: 매매 로직 관련 모듈
- **`util/`**:
    - `config.py`: YAML 설정 파일 로드
    - `logger.py`: 로그 기능 구현
    - `telegram_bot.py`: 텔레그램 알림 기능
    - `report_generator.py`: 엑셀 리포트 생성 기능
- **기타**
    - `main.py`: 프로그램 실행 엔트리 포인트
    - `requirements.txt`: 프로젝트 의존성 목록 (pip 패키지 관리)

## 6. 제약사항 (Constraints)
- 가상환경은 `jact_venv` 로 명명 한다.  
- **API Rate Limit 준수**: 거래소 API 호출 빈도 제한을 준수해야 함
- **법적 이슈**: 특정 국가에서는 자동 매매가 법적으로 제한될 수 있음
- **보안**: API Key 및 거래 내역을 안전하게 관리해야 함

---

## 7. 참고 자료 (References)

- **Upbit API 문서**: @https://docs.upbit.com
