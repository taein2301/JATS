---
description: software architecture
globs: *.py
alwaysApply: false
---
## 프로젝트 기술 스텍 

- 개발 언어 : python 
- Database : supabase
- web service : Streamlit
- cloude : AWS EC2 
- source 관리 : github 

## deploy
- git action 

## 개발 환경 
- mac : cursor IDE 
- python venv 가상환경 `jact_venv` 
- upbit api 요청은 `pyupbit` 사용 하지 말고 docs.upbit.com 사이트 참고 해서 request 로 구현 

## 프로젝트 구조 (Project Structure)

```
├── .gitignore
├── README.md
├── config
│   ├── dev_config.yaml
│   ├── prod_config.yaml
│   └── sample_config.yaml
├── log
├── main.py
├── requirements.txt
├── upbit
│   ├── analyzer.py
│   ├── api.py
│   ├── trader.py
├── kis  
│   ├── analyzer.py
│   ├── api.py
│   ├── trader.py
└── util
    ├── config.py
    ├── logger.py
    ├── telegram_bot.py
```

## FILE Description 
- **`config/`**: 환경별 설정 파일 저장 (개발, 운영, 샘플)
    - dev_config.yaml    : 개발기 정보
    - prod_config.yaml   : 운영기 정보
    - sample_config.yaml : git 에 올릴 sample config 
- **`upbit/`**: upbit 관련 매매 로직 관련 모듈
    ─ analyzer.py   : 분석  
    ─ api.py        : upbit api request json 형태 리턴 
    ─ trader.py     : 매수 / 매매 트레이팅 
- **`kis/`**: kid ( 한국 투자 증권 ) 관련 매매 로직 관련 모듈
    ─ analyzer.py   : 분석  
    ─ api.py        : upbit api request json 형태 리턴 
    ─ trader.py     : 매수 / 매매 트레이팅 
- **`util/`**:
    - `config.py`: YAML 설정 파일 로드
    - `logger.py`: 로그 기능 구현
    - `telegram_bot.py`: 텔레그램 알림 기능
    - `report_generator.py`: 엑셀 리포트 생성 기능
- **기타**
    - `main.py`: 프로그램 실행 엔트리 포인트 / 실행시 3번째 파라미터를 보고 upbit 매매 인지 kis 매매 인지 판단 
    - `requirements.txt`: 프로젝트 의존성 목록 (pip 패키지 관리)
    - `README.md`: 프로젝트 설명  

## 실행 방법 

### 운영기 
> python main.py upbit prod  
3번째 파라미터 : upbit / kis
4번째 파라미터 : prod / dev  
prod_config.yaml 파일 읽어서 처리  

### 개발기  
> python main.py upbit dev  
dev_config.yaml 파일 읽어서 처리  
