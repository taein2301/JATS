name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Run tests
      run: |
        pytest -v || echo "No tests found or tests failed"
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # 배포 디렉토리로 이동
          cd JATS 
          
          # 기존 프로세스 중지 (있다면)
          if pgrep -f "python main.py"; then
            pkill -f "python main.py"
            echo "기존 프로세스가 중지되었습니다."
          fi
          
          # 최신 코드 가져오기
          git pull
          
          # 가상환경 설정 (없으면 생성)
          if [ ! -d "jats_venv" ]; then
            python3 -m venv jats_venv
            echo "가상환경이 생성되었습니다."
          fi
          
          # 가상환경 활성화 및 의존성 설치
          source jats_venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # 설정 파일 확인 및 복사
          if [ ! -f "prod_config.yaml" ]; then
            echo "경고: prod_config.yaml 파일이 없습니다."
            if [ -f "sample_config.yaml" ]; then
              cp sample_config.yaml prod_config.yaml
              echo "sample_config.yaml을 prod_config.yaml로 복사했습니다."
            fi
          fi
          
          # 로그 디렉토리 생성
          mkdir -p logs
          
          # 애플리케이션 실행 (백그라운드로)
          nohup python main.py --platform=upbit --env=prod &